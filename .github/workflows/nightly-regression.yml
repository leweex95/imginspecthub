name: Nightly Regression Tests

on:
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        model: [clip, blip2, llava, minigpt4]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.2.0
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Create comprehensive test images
      run: |
        poetry run python -c "
        from PIL import Image, ImageDraw, ImageFont
        import os
        
        # Create test directory
        os.makedirs('regression_test_data', exist_ok=True)
        
        # Test image configurations
        configs = [
            {'name': 'simple_scene', 'color': 'lightblue', 'text': 'Simple Scene'},
            {'name': 'complex_scene', 'color': 'lightgreen', 'text': 'Complex Scene with Objects'},
            {'name': 'portrait', 'color': 'lightcoral', 'text': 'Portrait Style'},
            {'name': 'landscape', 'color': 'lightyellow', 'text': 'Landscape View'},
            {'name': 'abstract', 'color': 'lightpink', 'text': 'Abstract Pattern'},
            {'name': 'document', 'color': 'white', 'text': 'Document Text Sample'},
        ]
        
        for config in configs:
            # Create different sized images
            for size_name, (width, height) in [('small', (200, 150)), ('medium', (400, 300)), ('large', (800, 600))]:
                img = Image.new('RGB', (width, height), color=config['color'])
                draw = ImageDraw.Draw(img)
                
                # Add text
                text_size = max(12, width // 20)
                draw.text((10, 10), config['text'], fill='black')
                
                # Add geometric shapes
                if 'complex' in config['name']:
                    draw.rectangle([width//4, height//4, 3*width//4, 3*height//4], outline='red', width=2)
                    draw.ellipse([width//6, height//6, width//3, height//3], outline='blue', width=2)
                
                if 'landscape' in config['name']:
                    # Add horizon line
                    draw.line([0, height//2, width, height//2], fill='darkgreen', width=3)
                
                filename = f'regression_test_data/{config[\"name\"]}_{size_name}.jpg'
                img.save(filename)
                print(f'Created {filename}')
        "
    
    - name: Test model ${{ matrix.model }} with all operations
      id: test-model
      run: |
        echo \"Testing model: ${{ matrix.model }}\"
        
        # Test description operation
        echo \"Testing descriptions...\"
        for img in regression_test_data/*.jpg; do
          echo \"Processing $img with ${{ matrix.model }}\"
          poetry run python -m imginspecthub.cli run --model ${{ matrix.model }} --image \"$img\" --operation description || echo \"Failed: $img description\"
        done
        
        # Test embedding operation  
        echo \"Testing embeddings...\"
        for img in regression_test_data/*.jpg; do
          echo \"Processing $img embeddings with ${{ matrix.model }}\"
          poetry run python -m imginspecthub.cli run --model ${{ matrix.model }} --image \"$img\" --operation embedding || echo \"Failed: $img embedding\"
        done
        
        # Test batch processing
        echo \"Testing batch processing...\"
        poetry run python -m imginspecthub.cli batch --model ${{ matrix.model }} --directory regression_test_data --operations description,embedding --output batch_results_${{ matrix.model }}.json || echo \"Failed: batch processing\"
        
        echo \"Model ${{ matrix.model }} testing completed\"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-results-${{ matrix.model }}
        path: |
          regression_test_data/
          batch_results_*.json
        retention-days: 7
    
    - name: Check test results
      if: failure()
      run: |
        echo "Tests failed for model ${{ matrix.model }}"
        exit 1

  # Summary job that depends on all model tests
  test-summary:
    runs-on: ubuntu-latest
    needs: regression-tests
    if: always()
    
    steps:
    - name: Check overall results
      run: |
        if [[ "${{ needs.regression-tests.result }}" == "failure" ]]; then
          echo "Some regression tests failed"
          exit 1
        else
          echo "All regression tests passed"
        fi
    
    - name: Send failure notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: '[imginspecthub] Nightly Regression Tests Failed'
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: 'GitHub Actions <${{ secrets.SMTP_USERNAME }}>'
        html_body: |
          <h2>Nightly Regression Tests Failed</h2>
          <p>The nightly regression tests for imginspecthub have failed.</p>
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Branch:</strong> ${{ github.ref }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Workflow:</strong> ${{ github.workflow }}</p>
          <p><strong>Run ID:</strong> ${{ github.run_id }}</p>
          <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View failed workflow run</a></p>
          <hr>
          <p>Please check the workflow logs for detailed error information.</p>